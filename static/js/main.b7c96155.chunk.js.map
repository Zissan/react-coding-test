{"version":3,"sources":["components/error/PageNotFound.js","components/header/index.js","components/employee/CreateEmployee.js","components/employee/ManageEmployee.js","components/employee/EmployeeList.js","components/home/Home.js","App.js","serviceWorker.js","index.js"],"names":["PageNotFound","Header","className","href","id","to","CreateEmployee","onChange","onSubmit","errors","name","type","htmlFor","ManageEmployee","history","match","useState","firstName","lastName","city","employee","setEmployee","useEffect","params","response","localStorage","getItem","emp","JSON","parse","find","parseInt","rest","setErrors","target","value","event","preventDefault","err","key","validateEmployee","Object","keys","length","employees","setItem","stringify","push","Employee","restProps","onClick","onUpdate","onDelete","withRouter","loadEmployees","emps","handleUpdate","handleDelete","filter","map","Home","App","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b7c96155.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction PageNotFound() {\r\n  return <div>Page Not Found</div>;\r\n}\r\n\r\nexport default PageNotFound;\r\n","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <nav>\r\n      <div className=\"nav-wrapper\">\r\n        <a href=\"#\" className=\"brand-logo right\">\r\n          Employee Portal\r\n        </a>\r\n        <ul id=\"nav-mobile\" className=\"left hide-on-med-and-down\">\r\n          <li>\r\n            <NavLink to=\"/\">Home</NavLink>\r\n          </li>\r\n          <li>\r\n            <NavLink to=\"/new\" className=\"btn btn-flat\">\r\n              Create\r\n            </NavLink>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst CreateEmployee = ({ onChange, onSubmit, errors }) => {\r\n  return (\r\n    <div className=\"row\" onSubmit={onSubmit}>\r\n      <form className=\"col s12\">\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s6\">\r\n            <input\r\n              name=\"firstName\"\r\n              id=\"first_name\"\r\n              type=\"text\"\r\n              onChange={onChange}\r\n            />\r\n            <label htmlFor=\"first_name\">First Name</label>\r\n            {errors && errors[\"firstName\"] && <p>{errors[\"firstName\"]}</p>}\r\n          </div>\r\n          <div className=\"input-field col s6\">\r\n            <input\r\n              name=\"lastName\"\r\n              id=\"last_name\"\r\n              type=\"text\"\r\n              onChange={onChange}\r\n            />\r\n            <label htmlFor=\"last_name\">Last Name</label>\r\n            {errors && errors[\"lastName\"] && <p>{errors[\"lastName\"]}</p>}\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s12\">\r\n            <input name=\"city\" id=\"city\" type=\"text\" onChange={onChange} />\r\n            <label htmlFor=\"city\">City</label>\r\n            {errors && errors[\"city\"] && <p>{errors[\"city\"]}</p>}\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"input-field col s12\">\r\n            <button className=\"btn btn-block orange\" type=\"submit\">\r\n              Add\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nCreateEmployee.propTypes = {\r\n  onChange: PropTypes.func.isRequired,\r\n  onSubmit: PropTypes.func.isRequired\r\n};\r\n\r\nexport default CreateEmployee;\r\n","import React, { useState, useEffect, useRef } from \"react\";\r\nimport CreateEmployee from \"./CreateEmployee\";\r\n\r\nconst ManageEmployee = ({ history, match }) => {\r\n  const [employee, setEmployee] = useState({\r\n    firstName: \"\",\r\n    lastName: \"\",\r\n    city: \"\"\r\n  });\r\n\r\n  useEffect(() => {\r\n    const { id } = match.params;\r\n    if (id) {\r\n      const response = localStorage.getItem(\"employees\");\r\n      if (response) {\r\n        const emps = JSON.parse(response);\r\n        const emp = emps.find(emp => emp.id === parseInt(id));\r\n        if (emp) {\r\n          const { id, ...rest } = emp;\r\n          setEmployee({ ...rest });\r\n        }\r\n      }\r\n    }\r\n  }, [match.params]);\r\n\r\n  const [errors, setErrors] = useState({});\r\n\r\n  const validateEmployee = () => {\r\n    let err = {};\r\n\r\n    for (const key in employee) {\r\n      if (!employee[key]) {\r\n        err[key] = \"Please enter\";\r\n      }\r\n    }\r\n    setErrors({ ...err });\r\n  };\r\n\r\n  const handleChange = ({ target }) => {\r\n    setEmployee({\r\n      ...employee,\r\n      [target.name]: target.value\r\n    });\r\n  };\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    validateEmployee();\r\n    if (Object.keys(errors).length) {\r\n      return;\r\n    }\r\n\r\n    let employees = [];\r\n    if (localStorage.getItem(\"employees\")) {\r\n      employees = JSON.parse(localStorage.getItem(\"employees\"));\r\n    }\r\n\r\n    employees = [...employees, { ...employee, id: employees.length + 1 }];\r\n    localStorage.setItem(\"employees\", JSON.stringify(employees));\r\n    if (history) {\r\n      history.push(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CreateEmployee\r\n      onChange={handleChange}\r\n      onSubmit={handleSubmit}\r\n      errors={errors}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ManageEmployee;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nfunction Employee({ firstName, lastName, city, id, ...restProps }) {\r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col s12 m3\">{firstName}</div>\r\n      <div className=\"col s12 m3\">{lastName}</div>\r\n      <div className=\"col s12 m3\">{city}</div>\r\n      <div className=\"col s12 m1\">\r\n        <button\r\n          className=\"btn btn-block green\"\r\n          onClick={() => {\r\n            restProps.onUpdate(id);\r\n          }}\r\n        >\r\n          Update\r\n        </button>\r\n      </div>\r\n      <div className=\"col s12 m1\">\r\n        <button\r\n          className=\"btn btn-block red\"\r\n          onClick={() => {\r\n            restProps.onDelete(id);\r\n          }}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst EmployeeList = ({ history }) => {\r\n  const [employees, loadEmployees] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let response = localStorage.getItem(\"employees\");\r\n\r\n    if (response) {\r\n      const emps = JSON.parse(response);\r\n      if (emps.length) {\r\n        loadEmployees([...emps]);\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const handleUpdate = id => {\r\n    history.push(`/update/${id}`);\r\n  };\r\n\r\n  const handleDelete = id => {\r\n    const emps = employees.filter(emp => emp.id !== id);\r\n    loadEmployees(emps);\r\n    localStorage.setItem(\"employees\", JSON.stringify(emps));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h4>Employee's</h4>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m3\">\r\n          <label className=\"show-on-small \">First Name</label>\r\n        </div>\r\n        <div className=\"col s12 m3\">\r\n          <label className=\"show-on-small \">Last Name</label>\r\n        </div>\r\n        <div className=\"col s12 m3\">\r\n          <label className=\"show-on-small \">City</label>\r\n        </div>\r\n        <div className=\"col s12 m2\">Actions</div>\r\n      </div>\r\n      {employees.map(emp => {\r\n        return (\r\n          <Employee\r\n            key={emp.id}\r\n            {...emp}\r\n            onUpdate={handleUpdate}\r\n            onDelete={handleDelete}\r\n          />\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default withRouter(EmployeeList);\r\n","import React from \"react\";\r\nimport EmployeeList from \"../employee/EmployeeList\";\r\n\r\nconst Home = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <EmployeeList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport PageNotFound from \"./components/error/PageNotFound\";\nimport Header from \"./components/header\";\nimport ManageEmployee from \"./components/employee/ManageEmployee\";\nimport Home from \"./components/home/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Switch>\n        <Route path=\"/\" component={Home} exact />\n        <Route path=\"/new\" component={ManageEmployee} exact />\n        <Route path=\"/update/:id\" component={ManageEmployee} exact />\n        <Route component={PageNotFound} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter as Router } from \"react-router-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}